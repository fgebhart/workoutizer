
name: Matrix Test

on:
  pull_request:
    paths:
      - "**.py"
      - "setup/requirements/**.txt"
      - ".github/workflows/matrix_test.yml"

  push:
    branches: main

jobs:
  formatting:
    name: Formatting
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: black formatting
      run: |
        python -m pip install --upgrade pip
        pip install black==22.1.0
        black --check .
    - name: flake8 formatting
      if: always()
      run: |
        pip install flake8==4.0.1
        flake8 .
    - name: isort
      if: always()
      run: |
        pip install isort==5.10.1
        isort . --check-only

  test:
    name: Test
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
        os: [ubuntu-latest, macos-latest]

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v2
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: |
        poetry install --no-interaction --no-root

    - name: Run Tests
      if: always()
      run: |
        source .venv/bin/activate
        pytest tests/ -vv -n2 --color=yes

    - name: Build and Install Wheel
      if: always()
      run: |
        poetry build -f wheel
        source .venv/bin/activate
        pip install dist/workoutizer-*.whl

    - name: Init & Check
      if: always()
      env:
        WKZ_LOG_LEVEL: DEBUG
      run: |
        source .venv/bin/activate
        wkz --version
        wkz init --demo
        wkz check
